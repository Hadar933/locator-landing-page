const API_KEY = import.meta.env.VITE_GROQ_API_KEY;

export async function getAIRecommendations(prompt: string): Promise<{ parsed: AIRecommendationResponse, raw: string }> {
  try {
    const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${API_KEY}`
      },
      body: JSON.stringify({
        messages: [
          {
            role: "system",
            content: prompt
          }
        ],
        model: "llama-3.3-70b-versatile",
        temperature: 1,
        max_completion_tokens: 1024,
        top_p: 1,
        stream: false, // Changed to false for simpler handling
        stop: null
      })
    });

    if (!response.ok) {
      throw new Error(`API call failed: ${response.statusText}`);
    }

    const data = await response.json();
    const rawContent = data.choices[0].message.content;
    
    try {
      const recommendations = JSON.parse(rawContent);
      return {
        parsed: {
          ...recommendations,
          disclaimer: "These recommendations are generated by AI and may not be accurate."
        } as AIRecommendationResponse,
        raw: rawContent
      };
    } catch (e) {
      console.error('Failed to parse AI response:', e);
      throw new Error('We didnt quite get that. Can you rephrase?');
    }
  } catch (error) {
    console.error('AI service error:', error);
    throw error;
  }
}

export interface AIRecommendationResponse {
    recommendations: any[]; // Add this field to match the usage
    disclaimer: string;
}